// 1. Deposit money
// 2. Determine number of lines to bet on
// 3. Collect a bet amount
// 4. Spin the slots
// 5. Check if user won
// 6. Give user winnings, or take bet
// 7. Play again or end bc no money

const prompt = require("prompt-sync")();

const ROWS = 3;
const COLS = 3;

const SYMBOLS_COUNT = {
    A: 3,
    B: 6,
    C: 7,
    D: 8
}

const SYMBOL_VALUES = {
    A: 10,
    B: 8,
    C: 6,
    D: 4
}


const deposit = () => { // Depositing money
    while (true){
        const depositAmount = prompt("Enter A Deposit Amount In $: ") //Entering Amount
        const numberDepositAmount = parseFloat(depositAmount) //Use parseFloat to change string to int

        if (isNaN(numberDepositAmount) || numberDepositAmount <= 0) { //checking if it NaN (not a number) or less than 0
            console.log("Invalid Deposit Amount, Try Again")
        }else{
            return depositAmount //Goes back to entering amount to deposit
        }
    }
};

const getNumberOfLines = () => { //Determine number of lines to bet on
    while (true){
        const lines = prompt("Enter A Number Of Lines To Bet On (1-3): ") //Entering Amount
        const numberOfLines = parseFloat(lines) //Use parseFloat to change string to int

        if (isNaN(numberOfLines) || numberOfLines <= 0 || numberOfLines > 3) { //checking if it NaN (not a number) or if its greater than 3 or less than 0
            console.log("Invalid Number Of Lines Amount, Try Again")
        }else{
            return lines //Goes back to entering amount to deposit
        }
    }
};

const getBet = (balance, lines) => { //Getting Bet
    while (true){
        const bet = prompt("Enter A Bet Per Line: ") //Entering Amount
        const numberBet = parseFloat(bet) //Use parseFloat to change string to int

        if (isNaN(numberBet) || numberBet <= 0 || numberBet > balance / lines) {
            console.log("You're Too Broke Or Just Don't Know What A Number Is, Try Again")
        } else {
            return numberBet //Goes back to entering amount to deposit
        }
    }
};

const spin = () => {
    const symbols = [];
    for ([symbol, count] of Object.entries(SYMBOLS_COUNT)){ //loops through entires in count
        for (let i = 0; i < count; i++){
            symbols.push(symbol); //appends symbol counts into the array
        }
    }

    const reels = []; //each array represents a column in the slot;
    for (let i = 0; i < COLS; i ++){
        reels.push([]);
        const reelSymbols = [...symbols]; //randomly append a symbol from the above array 'symbols', add them here, and remove them up there
        for (let j = 0; j < ROWS; j++){
            const randomIndex = Math.floor(Math.random() * reelSymbols.length); //generate random value between 0-1, and multiply it by length of array, then use Math.floor to round down
            const selectedSymbol = reelSymbols[randomIndex]
            reels[i].push(selectedSymbol);
            reelSymbols.splice(randomIndex, 1) //Splice or remove the element from array once so it wont get selected again
        }
    }
    return reels;
};

const transpose = (reels) => {
    const rows = [];

    for (let i = 0; i < ROWS; i++){
        rows.push([]);
        for (let j = 0; j < COLS; j++){
            rows[i].push(reels[j][i])
        }
    }
    return rows
};

const printSlots = (rows) => {
    for (const row of rows){
        let rowString = "";
        for (const [i, symbol] of row.entries()){
            rowString += symbol
            if (i != row.length - 1){
                rowString += " | "
            }
        }
        console.log(rowString)
    }
};

const getWinning = (rows, bet, lines) => {
    let winnings = 0;

    for (let row = 0; row < lines; row++){ //If bet on only 1 line, only check row index 0
        const symbols = rows[row];
        let allSame = true;

        for (const symbol of symbols){
            if (symbol != symbols[0]){
                allSame = false;
                break
            }
        }

        if (allSame){
            winnings += bet * SYMBOL_VALUES[symbols[0]]
        }

    }
        return winnings;
};

const game = () => {
  let balance = deposit();

  while (true) {
    console.log("You have a balance of $" + balance);
    const numberOfLines = getNumberOfLines();
    const bet = getBet(balance, numberOfLines);
    balance -= bet * numberOfLines;
    const reels = spin();
    const rows = transpose(reels);
    printSlots(rows);
    const winnings = getWinning(rows, bet, numberOfLines);
    balance += winnings;
    console.log("You won, $" + winnings.toString());

    if (balance <= 0) {
      console.log("You ran out of money!");
      break;
    }

    const playAgain = prompt("Do you want to play again (y/n)? ");

    if (playAgain != "y") break;
  }
};

game();